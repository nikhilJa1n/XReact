{
	// Place your XReact workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"hello": {
		"prefix": "hello",
		"body": [
			"export default class App extends Component {",
			"  render() {",
			"    return JSX(",
			"      <div>Hello World</div>",
			"    )",
			"  }",
			"}"
		],
		"description": "helloworld in xreacr"
	},

	"hellonest": {
		"prefix": "hellonest",
		"body": [
			"export default class App extends Component {",
			"  render() {",
			"    return JSX(",
			"      <div>",
			"        <ul>",
			"          <li>Nested item 1</li>",
			"          <li>Nested item 2</li>",
			"          <li>Nested item 3</li>",
			"        </ul>",
			"      </div>",
			"    )",
			"  }",
			"}"
		],
		"description": "nested elements in JSX"
	},
	"index": {
		"prefix": "index",
		"body": [
			"const app = JSX(",
			"  <App title='XReact' />",
			"),",
			"render(app, document.getElementById('root'));"
		],
		"description": "code for index.js"
	},
	"component": {
		"prefix": "componentbutton",
		"body": [
			"export default class App extends Component {",
			"  render() {",
			"    return JSX(",
			"      <div>",
			"        <ul>",
			"          <li>Nested item 1</li>",
			"          <li>Nested item 2</li>",
			"          <li>Nested item 3</li>",
			"        </ul>",
			"        <ChildComponent />",
			"      </div>",
			"    )",
			"  }",
			"}"
		],
		"description": "component child"
	},
	"props": {
		"prefix": "propspassed",
		"body": [
			"export default class App extends Component {",
			"constructor(props){",
			"  super(props);",
			"  this.handleClick=this.handleClick.bind(this);",
			"}",
			"  handleClick() {",
			"    alert('clicked')",
			"  }",
			"  render() {",
			"    return JSX(",
			"      <div>",
			"        <ul>",
			"          <li>Nested item 1</li>",
			"          <li>Nested item 2</li>",
			"          <li>Nested item 3</li>",
			"        </ul>",
			"        <ChildComponent buttonClick={this.handleClick}/>",
			"      </div>",
			"    )",
			"  }",
			"}",
			""
		],
		"description": "passing props"
	},
	"statechanged": {
		"prefix": "statechanged",
		"body": [
			"export default class App extends Component {",
			"constructor(props){",
			"  super(props);",
			"  this.state={",
			"    counter:0,",
			"  }",
			"  this.handleClick=this.handleClick.bind(this);",
			"}",
			"  handleClick() {",
			"    this.setState({counter:this.state.counter+1,})",
			"  }",
			"  render() {",
			"    return JSX(",
			"      <div>",
			"        <ul>",
			"          <li>{this.state.counter}</li>",
			"        </ul>",
			"        <ChildComponent buttonClick={this.handleClick}/>",
			"      </div>",
			"    )",
			"  }",
			"}"
		],
		"description": "state changed"
	},
	"mount": {
		"prefix": "mount",
		"body": [
			"export default class App extends Component {",
			"constructor(props){",
			"  super(props);",
			"  this.state={",
			"    counter:0,",
			"  }",
			"  this.handleClick=this.handleClick.bind(this);",
			"}",
			"  handleClick() {",
			"    this.setState({counter:this.state.counter+1,})",
			"  }",
			"  componentDidMount(){",
			"    this.setState({counter:1000,})",
			"  }",
			"  render() {",
			"    return JSX(",
			"      <div>",
			"        <ul>",
			"          <li>{this.state.counter}</li>",
			"        </ul>",
			"        <ChildComponent buttonClick={this.handleClick}/>",
			"      </div>",
			"    )",
			"  }",
			"}",
			""
		],
		"description": "mount"
	}
}